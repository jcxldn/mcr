name: builder

on: [push, workflow_dispatch]

jobs:
  papermc-alpine:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Login to Docker Hub
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
        if: github.ref == 'refs/heads/master'
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      -
        name: List Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Run Buildx (base-papermc-alpine)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --output "type=image,push=$([[ $GITHUB_REF == "refs/heads/master" ]] && echo true || echo false)" \
            -f common/papermc/base.alpine.Dockerfile -t jcxldn/minecraft-runner:base-papermc-alpine .
      -
        name: Run Buildx (paper-alpine)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --output "type=image,push=$([[ $GITHUB_REF == "refs/heads/master" ]] && echo true || echo false)" \
            -f paper/alpine.Dockerfile -t jcxldn/minecraft-runner:paper-alpine .
      -
        name: Run Buildx (waterfall-alpine)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --output "type=image,push=$([[ $GITHUB_REF == "refs/heads/master" ]] && echo true || echo false)" \
            -f waterfall/alpine.Dockerfile -t jcxldn/minecraft-runner:waterfall-alpine .
      -
        name: Run Buildx (purpur-alpine)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --output "type=image,push=$([[ $GITHUB_REF == "refs/heads/master" ]] && echo true || echo false)" \
            -f purpur/alpine.Dockerfile -t jcxldn/minecraft-runner:purpur-alpine .
      -
        name: Run Buildx (velocity-alpine)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --output "type=image,push=$([[ $GITHUB_REF == "refs/heads/master" ]] && echo true || echo false)" \
            -f velocity/alpine.Dockerfile -t jcxldn/minecraft-runner:velocity-alpine .
  geyser-alpine:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Login to Docker Hub
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
        if: github.ref == 'refs/heads/master'
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      -
        name: List Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Run Buildx (geyser-alpine)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --output "type=image,push=$([[ $GITHUB_REF == "refs/heads/master" ]] && echo true || echo false)" \
            -f geyser/alpine.Dockerfile -t jcxldn/minecraft-runner:geyser-alpine .
  fabric-alpine:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Login to Docker Hub
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin
        if: github.ref == 'refs/heads/master'
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      -
        name: List Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Run Buildx (fabric-alpine)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --output "type=image,push=$([[ $GITHUB_REF == "refs/heads/master" ]] && echo true || echo false)" \
            -f fabric/alpine.Dockerfile -t jcxldn/minecraft-runner:fabric-alpine .
  test:
    runs-on: ubuntu-latest
    # Run in an alpine container
    container:
      image: alpine:latest
    needs: ["papermc-alpine", "geyser-alpine"]
    strategy:
      matrix: 
        # Specify servers with "Done (xyz)!" syntax
        # fabric does not have automatic eula agree so it won't be tested initially.
        tag: ["geyser-alpine", "paper-alpine", "purpur-alpine", "velocity-alpine"]
        pattern: ["Done ("]
        # Manually include servers with differing syntax
        include:
          - tag: "waterfall-alpine"
            pattern: "Listening on"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Install coreutils (for tail), bash, screen & grep
        # See test.sh for details: coreutils 8.28+ needed for grep to terminate
        run: apk add --no-cache coreutils bash screen grep
      - 
        name: Run testing script
        run: cd .github/ci && chmod +x test.sh && ./test.sh jcxldn/minecraft-runner:${{ matrix.tag }} "${{ matrix.pattern }}"